// Copyright 2016 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

apply plugin: 'com.android.model.application'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def ndkDir = properties.getProperty('ndk.dir')
def shadercLibPath = file(ndkDir).absolutePath + "/sources/third_party/shaderc"
def vulkanWrapperPath = file(project.rootProject.projectDir).absolutePath + "/vulkan_wrapper"

def stlType = "c++_shared"

model {
    repositories {
        libs(PrebuiltLibraries) {
            shaderc {
                headers.srcDir "${shadercLibPath}/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${shadercLibPath}/libs/${stlType}/${targetPlatform.getName()}/libshaderc.a")
                }
            }
        }
    }

    android {
        compileSdkVersion = "android-N"
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            applicationId = "org.khronos.vulkan.samples.initpipeline"
            minSdkVersion.apiLevel = 22
            targetSdkVersion.apiLevel = 24
            versionCode = 1
            versionName = "0.0.1"
        }

        compileOptions.with {
            sourceCompatibility=JavaVersion.VERSION_1_7
            targetCompatibility=JavaVersion.VERSION_1_7
        }
    }

    android.ndk {
        moduleName = "vulkan_samples"
        cppFlags.add("-Werror")
        cppFlags.add("-std=c++11")
        toolchain = "clang"
        stl = stlType
        ldLibs.addAll(["log", "android"])
        cppFlags.add("-I${file("${ndkDir}/sources/android/native_app_glue")}".toString())
        cppFlags.add("-I${file("../../data")}".toString())
        cppFlags.add("-I${file("../../utils")}".toString())
        cppFlags.add("-I${file("../../utils/glm")}".toString())
        cppFlags.add("-I${file(vulkanWrapperPath)}".toString())
        cppFlags.add("-I${file("${shadercLibPath}/third_party/spirv-tools/include")}".toString())
        cppFlags.add("-I${file("${shadercLibPath}/third_party/spirv-tools/include/spirv-tools")}".toString())
        cppFlags.add("-D VK_USE_PLATFORM_ANDROID_KHR")
        
    }

    // Turn on hard float support in armeabi-v7a
    android.abis {
        create("armeabi-v7a") {
            cppFlags.addAll(["-mhard-float", "-D_NDK_MATH_NO_SOFTFP=1", "-mfloat-abi=hard"])
            ldLibs.add("m_hard")
            ldFlags.add("-Wl,--no-warn-mismatch")
        }
    }

    android.sources {
        main {
            jni {
                dependencies {
                    project ":nativeactivity" linkage "static"
                    library "shaderc"         linkage "static"
                 }
                source {
                    srcDir 'src/main/jni'
                    srcDir '../../initpipeline'
                    srcDir '../../ext/'
                    srcDir '../../utils'
                    srcDir vulkanWrapperPath
                }
            }
            jniLibs {
                dependencies {
                    
                }
            }
            assets {
                source {
                    
                }
            }
        }
    }

    android.buildTypes {
        release {
            ndk.with {
                debuggable = true
            }
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.pro'))
        }
    }

    android.productFlavors {
        // for detailed abiFilter descriptions, refer to "Supported ABIs" @
        // https://developer.android.com/ndk/guides/abis.html#sa
        create("all") {
            
            ndk.abiFilters.add("armeabi-v7a")
            ndk.abiFilters.add("arm64-v8a")
            ndk.abiFilters.add("x86")
            ndk.abiFilters.add("x86_64")
        }
    }
}

task build_shaderc(type:Exec) {
    workingDir "${shadercLibPath}"
    commandLine "${ndkDir}/ndk-build", "NDK_PROJECT_PATH=.", "APP_BUILD_SCRIPT=Android.mk", "APP_STL:=${stlType}", "APP_ABI=all", "libshaderc_combined", "-j16"
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('compile')) {
        task.dependsOn build_shaderc
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':nativeactivity')
}
